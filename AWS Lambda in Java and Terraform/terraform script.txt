# Configure the AWS provider
provider "aws" {
  region = "eu-west-1"
  shared_credentials_file = "$HOME/.aws/credentials"
}

# Create an S3 bucket for storing the application package
resource "aws_s3_bucket" "s3_bucket_myapp" {
  bucket = "myapp-prod"
  acl = "private"
}

# Within that bucket, we can add the JAR file as an object:
resource "aws_s3_bucket_object" "s3_bucket_object_myapp" {
  bucket = aws_s3_bucket.s3_bucket_myapp.id
  key = "beanstalk/myapp"
  source = "target/myapp-1.0.0.jar"
}

#Within the Terraform scripts, we first have to create an application:
resource "aws_elastic_beanstalk_application" "beanstalk_myapp" {
  name = "myapp"
  description = "The description of my application"
}

#After that, we have to create a version, in which we can tell AWS where to find our application:
resource "aws_elastic_beanstalk_application_version" "beanstalk_myapp_version" {
  application = aws_elastic_beanstalk_application.beanstalk_myapp.name
  bucket = aws_s3_bucket.s3_bucket_myapp.id
  key = aws_s3_bucket_object.s3_bucket_object_myapp.id
  name = "myapp-1.0.0"
}

#In this example, I’ll run my application on Java 11, so I decided to use “64bit Amazon Linux 2 v3.1.8 running Corretto 11”.
resource "aws_elastic_beanstalk_environment" "beanstalk_myapp_env" {
  name = "myapp-prod"
  application = aws_elastic_beanstalk_application.beanstalk_myapp.name
  solution_stack_name = "64bit Amazon Linux 2 v3.1.7 running Corretto 11"
  version_label = aws_elastic_beanstalk_application_version.beanstalk_myapp_version.name
 
  // ...
}

resource "aws_elastic_beanstalk_environment" "beanstalk_myapp_env" {
  name = "myapp-prod"
  application = aws_elastic_beanstalk_application.beanstalk_myapp.name
  solution_stack_name = "64bit Amazon Linux 2 v3.1.7 running Corretto 11"
  version_label = aws_elastic_beanstalk_application_version.beanstalk_myapp_version.name

  setting {
    name = "SERVER_PORT"
    namespace = "aws:elasticbeanstalk:application:environment"
    value = "5000"
  }
  
  // ...
}

#To configure the instance type, I’ll use:
resource "aws_elastic_beanstalk_environment" "beanstalk_myapp_env" {
  name = "myapp-prod"
  application = aws_elastic_beanstalk_application.beanstalk_myapp.name
  solution_stack_name = "64bit Amazon Linux 2 v3.1.7 running Corretto 11"
  version_label = aws_elastic_beanstalk_application_version.beanstalk_myapp_version.name

  setting {
    name = "SERVER_PORT"
    namespace = "aws:elasticbeanstalk:application:environment"
    value = "5000"
  }

  setting {
    namespace = "aws:ec2:instances"
    name = "InstanceTypes"
    value = "t2.micro"
  }

  // ...
}

#Another setting I had to configure to make it work is to provide an IAM profile
resource "aws_elastic_beanstalk_environment" "beanstalk_myapp_env" {
  name = "myapp-prod"
  application = aws_elastic_beanstalk_application.beanstalk_myapp.name
  solution_stack_name = "64bit Amazon Linux 2 v3.1.7 running Corretto 11"
  version_label = aws_elastic_beanstalk_application_version.beanstalk_myapp_version.name

  setting {
    name = "SERVER_PORT"
    namespace = "aws:elasticbeanstalk:application:environment"
    value = "5000"
  }

  setting {
    namespace = "aws:ec2:instances"
    name = "InstanceTypes"
    value = "t2.micro"
  }
  
  setting {
   namespace = "aws:autoscaling:launchconfiguration"
   name = "IamInstanceProfile"
   value = "aws-elasticbeanstalk-ec2-role"
  }
}

#Testing it out
terraform init
terraform apply

#Changing the backend type
terraform {
  backend "s3" {
    bucket = "terraform-state-bucket-eu-west-1"
    key = "myapp/terraform.tfstate"
    shared_credentials_file = "$HOME/.aws/credentials"
    region = "eu-west-1"
    dynamodb_table = "terraform-locks"
    encrypt = true
  }
}

#Working with variables
variable "myapp_version" {
  type = "string"
}

variable "environment_suffix" {
  type = "string"
}

#The next part is to use the variables where necessary. For example, within the beanstalk_myapp_env resource I can change the name to this:
resource "aws_elastic_beanstalk_environment" "beanstalk_myapp_env" {
  name = "myapp-${var.environment_suffix}"
  // ...
}

#I can do the same thing for the S3 bucket where I store my JAR file. Whether you need this depends on whether you build different JAR files for different environments.
resource "aws_s3_bucket" "s3_bucket_myapp" {
  bucket = "myapp-${var.environment_suffix}"
  acl = "private"
}

#In addition, we can use ${var.myapp_version} for the source of the S3 object.
resource "aws_s3_bucket_object" "s3_bucket_object_myapp" {
  bucket = aws_s3_bucket.s3_bucket_myapp.id
  key = "beanstalk/myapp"
  source = "target/myapp-${var.myapp_version}.jar"
}

#And finally, we can use the same variable for the Elastic Beanstalk version:
resource "aws_elastic_beanstalk_application_version" "beanstalk_myapp_version" {
  application = aws_elastic_beanstalk_application.beanstalk_myapp.name
  bucket = aws_s3_bucket.s3_bucket_myapp.id
  key = aws_s3_bucket_object.s3_bucket_object_myapp.id
  name = "myapp-${var.myapp_version}"
}




#If you want to work with these variables now, you can use the -var parameter:

terraform apply -var="environment_suffix=prod" -var="myapp_version=1.0.0"

#Alternatively, you can create a file called production.tfvars and add the following contents:

environment_suffix=prod
myapp_version=1.0.0

#Then you can use the file like this:

terraform apply -var-file="production.tfvars"